[gd_scene load_steps=6 format=3 uid="uid://bqnm4mtgu6j5u"]

[ext_resource type="PackedScene" uid="uid://clkxg7kmwnd7j" path="res://_extra/AnatomyOpenDwarf.glb" id="2_yir2u"]

[sub_resource type="ProceduralSkyMaterial" id="ProceduralSkyMaterial_pc5co"]
sky_horizon_color = Color(0.64625, 0.65575, 0.67075, 1)
ground_horizon_color = Color(0.64625, 0.65575, 0.67075, 1)

[sub_resource type="Sky" id="Sky_2n5n1"]
sky_material = SubResource("ProceduralSkyMaterial_pc5co")

[sub_resource type="Environment" id="Environment_yimp0"]
background_mode = 2
sky = SubResource("Sky_2n5n1")
tonemap_mode = 2

[sub_resource type="GDScript" id="GDScript_we5g8"]
script/source = "@tool

extends Node3D
## Traverse a group of 3D meshes to define volume for a creature's [Organ]s
##
## Goes through each direct child of this node, aquiring the [AABB] boundry
## and dimensions of the [Organ]. All organs are rectangular prisims, so
## this should be accurate. All child meshes MUST be normalized, make sure
## scale was applied `Ctrl+A` if importing your .glb from Blender.
##

@export_file(\"*.json\") var filePath: String = \"res://_extra/human_male.json\"

@export var SaveFile: bool = false:
	set(_value):
		saveFile()
		
@export var ReadFile: bool = false:
	set(_value):
		readFile()

@export_group(\"Make new JSON file in _extra\")
@export var fileName: String = \"new_template.json\";
@export var MakeFile: bool = false:
	set(_value):
		makeFile()

func readFile() ->void:
	var file = FileAccess.open(filePath, FileAccess.READ)
	var inputObj: Dictionary = {}
	var regex = RegEx.new()
	regex.compile(\"(\\\\d*\\\\.?\\\\d*)\\\\w\")
	
	inputObj = JSON.parse_string(file.get_as_text())
	
	for key in inputObj.keys():
		var stringSize: String = inputObj[key].size
		# find float in vector3 string
		var vectorParams: Array = regex.search_all(stringSize).map(
			func (rmatch: RegExMatch): return rmatch.get_string().to_float()
		)
		var freshV3 = Vector3(vectorParams[0], vectorParams[1], vectorParams[2])
		inputObj[key].size = freshV3
	
	print(inputObj.Brain.size.z)
	file.close()

func saveFile() ->void:
	var outputObj: Dictionary = {}
	
	for child in self.get_children():
		var currentBoundry: AABB = child.mesh.get_aabb()
		assert(str(child.scale) == str(Vector3(1.0, 1.0, 1.0)), \"%s has incorrect scaling: %s\" % [child.name, child.scale])
		# multiplying size arguments ~== get_volume()-
		outputObj[child.name] = {
			\"volume\": currentBoundry.get_volume(), 
			\"size\":currentBoundry.size,
		}
	
	var output: String = JSON.stringify(outputObj, \"	\")
	
	var file = FileAccess.open(filePath, FileAccess.WRITE)
	file.store_string(output)
	file.close()

func makeFile():
	var file = FileAccess.open(\"res://_extra/%s\" % fileName, FileAccess.WRITE)
	file.store_string(\"{}\")
	file.close()
"

[node name="3D Test scene" type="Node3D"]

[node name="Camera3D" type="Camera3D" parent="."]
transform = Transform3D(0.366501, -0.256458, 0.894375, 0, 0.961262, 0.275637, -0.930418, -0.101021, 0.352304, 1.494, 1.636, 0.562)
visible = false
metadata/_edit_lock_ = true

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(-0.866023, -0.433016, 0.250001, 0, 0.499998, 0.866027, -0.500003, 0.749999, -0.43301, 0, 6.6747, 0)
light_color = Color(1, 1, 0.980392, 1)
shadow_enabled = true

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_yimp0")

[node name="AnatomyOpenDwarf" parent="." instance=ExtResource("2_yir2u")]
script = SubResource("GDScript_we5g8")
fileName = "human_female.json"
